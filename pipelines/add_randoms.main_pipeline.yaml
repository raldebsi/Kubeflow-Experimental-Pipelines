apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: add-random-3-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12, pipelines.kubeflow.org/pipeline_compilation_time: '2022-05-22T19:43:17.558174',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Add Random", "inputs":
      [{"name": "a", "type": "Integer"}, {"name": "b", "type": "Integer"}], "name":
      "Add Random "}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12}
spec:
  entrypoint: add-random-3
  templates:
  - name: add-random
    container:
      args: [--num, '{{inputs.parameters.a}}', '----output-paths', /tmp/outputs/num/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "def add_random(num):\n\tfrom collections import namedtuple\n\n\texample_output\
        \ = namedtuple(\n\t\t'Outputs',\n\t\t['num'])\n\treturn example_output(num\
        \ + 3)\n\treturn num + 3\n\ndef _serialize_int(int_value: int) -> str:\n \
        \   if isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value,\
        \ int):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of\
        \ int.'.format(\n            str(int_value), str(type(int_value))))\n    return\
        \ str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Add\
        \ random', description='')\n_parser.add_argument(\"--num\", dest=\"num\",\
        \ type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
        \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
        , [])\n\n_outputs = add_random(**_parsed_args)\n\n_output_serializers = [\n\
        \    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
        \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
        \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
      image: python:3.7
    inputs:
      parameters:
      - {name: a}
    outputs:
      parameters:
      - name: add-random-num
        valueFrom: {path: /tmp/outputs/num/data}
      artifacts:
      - {name: add-random-num, path: /tmp/outputs/num/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--num", {"inputValue": "num"}, "----output-paths", {"outputPath":
          "num"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          add_random(num):\n\tfrom collections import namedtuple\n\n\texample_output
          = namedtuple(\n\t\t''Outputs'',\n\t\t[''num''])\n\treturn example_output(num
          + 3)\n\treturn num + 3\n\ndef _serialize_int(int_value: int) -> str:\n    if
          isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value,
          int):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          int.''.format(\n            str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add
          random'', description='''')\n_parser.add_argument(\"--num\", dest=\"num\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add_random(**_parsed_args)\n\n_output_serializers
          = [\n    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "num", "type": "Integer"}],
          "name": "Add random", "outputs": [{"name": "num", "type": "Integer"}]}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"num":
          "{{inputs.parameters.a}}"}'}
  - name: add-random-2
    container:
      args: [--num, '{{inputs.parameters.b}}', '----output-paths', /tmp/outputs/num/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "def add_random(num):\n\tfrom collections import namedtuple\n\n\texample_output\
        \ = namedtuple(\n\t\t'Outputs',\n\t\t['num'])\n\treturn example_output(num\
        \ + 3)\n\treturn num + 3\n\ndef _serialize_int(int_value: int) -> str:\n \
        \   if isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value,\
        \ int):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of\
        \ int.'.format(\n            str(int_value), str(type(int_value))))\n    return\
        \ str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Add\
        \ random', description='')\n_parser.add_argument(\"--num\", dest=\"num\",\
        \ type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
        \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
        , [])\n\n_outputs = add_random(**_parsed_args)\n\n_output_serializers = [\n\
        \    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
        \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
        \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
      image: python:3.7
    inputs:
      parameters:
      - {name: b}
    outputs:
      parameters:
      - name: add-random-2-num
        valueFrom: {path: /tmp/outputs/num/data}
      artifacts:
      - {name: add-random-2-num, path: /tmp/outputs/num/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--num", {"inputValue": "num"}, "----output-paths", {"outputPath":
          "num"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          add_random(num):\n\tfrom collections import namedtuple\n\n\texample_output
          = namedtuple(\n\t\t''Outputs'',\n\t\t[''num''])\n\treturn example_output(num
          + 3)\n\treturn num + 3\n\ndef _serialize_int(int_value: int) -> str:\n    if
          isinstance(int_value, str):\n        return int_value\n    if not isinstance(int_value,
          int):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          int.''.format(\n            str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add
          random'', description='''')\n_parser.add_argument(\"--num\", dest=\"num\",
          type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add_random(**_parsed_args)\n\n_output_serializers
          = [\n    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "num", "type": "Integer"}],
          "name": "Add random", "outputs": [{"name": "num", "type": "Integer"}]}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"num":
          "{{inputs.parameters.b}}"}'}
  - name: add-random-3
    inputs:
      parameters:
      - {name: a}
      - {name: b}
    dag:
      tasks:
      - name: add-random
        template: add-random
        arguments:
          parameters:
          - {name: a, value: '{{inputs.parameters.a}}'}
      - name: add-random-2
        template: add-random-2
        arguments:
          parameters:
          - {name: b, value: '{{inputs.parameters.b}}'}
      - name: mult-int
        template: mult-int
        dependencies: [add-random, add-random-2]
        arguments:
          parameters:
          - {name: add-random-2-num, value: '{{tasks.add-random-2.outputs.parameters.add-random-2-num}}'}
          - {name: add-random-num, value: '{{tasks.add-random.outputs.parameters.add-random-num}}'}
  - name: mult-int
    container:
      args: [--a, '{{inputs.parameters.add-random-num}}', --b, '{{inputs.parameters.add-random-2-num}}',
        '----output-paths', /tmp/outputs/num/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "def mult_int(a, b):\n\tfrom collections import namedtuple\n\texample_output\
        \ = namedtuple(\n\t\t'Outputs',\n\t\t['num'])\n\treturn example_output(a *\
        \ b)\n\ndef _serialize_int(int_value: int) -> str:\n    if isinstance(int_value,\
        \ str):\n        return int_value\n    if not isinstance(int_value, int):\n\
        \        raise TypeError('Value \"{}\" has type \"{}\" instead of int.'.format(\n\
        \            str(int_value), str(type(int_value))))\n    return str(int_value)\n\
        \nimport argparse\n_parser = argparse.ArgumentParser(prog='Mult int', description='')\n\
        _parser.add_argument(\"--a\", dest=\"a\", type=int, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--b\", dest=\"b\", type=int, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str,\
        \ nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
        _output_paths\", [])\n\n_outputs = mult_int(**_parsed_args)\n\n_output_serializers\
        \ = [\n    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
        \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
        \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
      image: python:3.7
    inputs:
      parameters:
      - {name: add-random-2-num}
      - {name: add-random-num}
    outputs:
      artifacts:
      - {name: mult-int-num, path: /tmp/outputs/num/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--a", {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths",
          {"outputPath": "num"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def mult_int(a, b):\n\tfrom collections import namedtuple\n\texample_output
          = namedtuple(\n\t\t''Outputs'',\n\t\t[''num''])\n\treturn example_output(a
          * b)\n\ndef _serialize_int(int_value: int) -> str:\n    if isinstance(int_value,
          str):\n        return int_value\n    if not isinstance(int_value, int):\n        raise
          TypeError(''Value \"{}\" has type \"{}\" instead of int.''.format(\n            str(int_value),
          str(type(int_value))))\n    return str(int_value)\n\nimport argparse\n_parser
          = argparse.ArgumentParser(prog=''Mult int'', description='''')\n_parser.add_argument(\"--a\",
          dest=\"a\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
          dest=\"b\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = mult_int(**_parsed_args)\n\n_output_serializers
          = [\n    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "a", "type": "Integer"}, {"name":
          "b", "type": "Integer"}], "name": "Mult int", "outputs": [{"name": "num",
          "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"a":
          "{{inputs.parameters.add-random-num}}", "b": "{{inputs.parameters.add-random-2-num}}"}'}
  arguments:
    parameters:
    - {name: a}
    - {name: b}
  serviceAccountName: pipeline-runner
