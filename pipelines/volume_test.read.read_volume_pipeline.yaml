apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: shared-volume-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12, pipelines.kubeflow.org/pipeline_compilation_time: '2022-07-12T11:46:53.829607',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Test reading from a consistent
      volume", "inputs": [{"name": "data_path", "type": "String"}], "name": "Shared
      Volume Pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12}
spec:
  entrypoint: shared-volume-pipeline
  templates:
  - name: read-file
    container:
      args: [--path, '{{inputs.parameters.data_path}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def read_file(path):
            import os
            full_path = os.path.join(path, "file.txt")
            print("Full path is {}".format(full_path))
            print("Current path is {}".format(os.getcwd()))
            with open(full_path, "r", encoding='utf-8') as f:
                data = f.read()
                print(data)
                return data

        import argparse
        _parser = argparse.ArgumentParser(prog='Read file', description='')
        _parser.add_argument("--path", dest="path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = read_file(**_parsed_args)
      image: python:3.7
      volumeMounts:
      - {mountPath: '{{inputs.parameters.data_path}}', name: ridhwan-pvc-mount-89771ee}
    inputs:
      parameters:
      - {name: data_path}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--path", {"inputValue": "path"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def read_file(path):\n    import os\n    full_path = os.path.join(path,
          \"file.txt\")\n    print(\"Full path is {}\".format(full_path))\n    print(\"Current
          path is {}\".format(os.getcwd()))\n    with open(full_path, \"r\", encoding=''utf-8'')
          as f:\n        data = f.read()\n        print(data)\n        return data\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Read file'', description='''')\n_parser.add_argument(\"--path\",
          dest=\"path\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = read_file(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "path", "type": "String"}],
          "name": "Read file"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"path":
          "{{inputs.parameters.data_path}}"}'}
    volumes:
    - name: ridhwan-pvc-mount-89771ee
      persistentVolumeClaim: {claimName: ridhwan-pvc-mount}
  - name: shared-volume-pipeline
    inputs:
      parameters:
      - {name: data_path}
    dag:
      tasks:
      - name: read-file
        template: read-file
        arguments:
          parameters:
          - {name: data_path, value: '{{inputs.parameters.data_path}}'}
  arguments:
    parameters:
    - {name: data_path}
  serviceAccountName: pipeline-runner
