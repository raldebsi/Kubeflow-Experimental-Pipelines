apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: writing-into-pvc-test-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12, pipelines.kubeflow.org/pipeline_compilation_time: '2022-05-27T19:00:52.261082',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Test writing to a consistent
      volume", "name": "Writing Into PVC Test"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12}
spec:
  entrypoint: writing-into-pvc-test
  templates:
  - name: create-ridhwan-volumes
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: ridhwan-pvc-mount
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    outputs:
      parameters:
      - name: create-ridhwan-volumes-manifest
        valueFrom: {jsonPath: '{}'}
      - name: create-ridhwan-volumes-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: create-ridhwan-volumes-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: read-file
    container:
      args: [--path, /data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def read_file(path):
            import os
            full_path = os.path.join(path, "file.txt")
            with open(full_path, "r", encoding='utf-8') as f:
                return f.read()

        import argparse
        _parser = argparse.ArgumentParser(prog='Read file', description='')
        _parser.add_argument("--path", dest="path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = read_file(**_parsed_args)
      image: python:3.7
      volumeMounts:
      - {mountPath: /data, name: create-ridhwan-volumes}
    inputs:
      parameters:
      - {name: create-ridhwan-volumes-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--path", {"inputValue": "path"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def read_file(path):\n    import os\n    full_path = os.path.join(path,
          \"file.txt\")\n    with open(full_path, \"r\", encoding=''utf-8'') as f:\n        return
          f.read()\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Read
          file'', description='''')\n_parser.add_argument(\"--path\", dest=\"path\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = read_file(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs": [{"name":
          "path", "type": "String"}], "name": "Read file"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"path": "/data"}'}
    volumes:
    - name: create-ridhwan-volumes
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-ridhwan-volumes-name}}'}
  - name: write-file
    container:
      args: [--contents, This is a file created by the pipeline into /data, --path,
        /data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def write_file(contents, path):
            import os
            os.makedirs(path, exist_ok=True)
            full_path = os.path.join(path, "file.txt")
            with open(full_path, "w", encoding='utf-8') as f:
                f.write(contents)

        import argparse
        _parser = argparse.ArgumentParser(prog='Write file', description='')
        _parser.add_argument("--contents", dest="contents", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--path", dest="path", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = write_file(**_parsed_args)
      image: python:3.7
      volumeMounts:
      - {mountPath: /data, name: create-ridhwan-volumes}
    inputs:
      parameters:
      - {name: create-ridhwan-volumes-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--contents", {"inputValue": "contents"}, "--path", {"inputValue":
          "path"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          write_file(contents, path):\n    import os\n    os.makedirs(path, exist_ok=True)\n    full_path
          = os.path.join(path, \"file.txt\")\n    with open(full_path, \"w\", encoding=''utf-8'')
          as f:\n        f.write(contents)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Write
          file'', description='''')\n_parser.add_argument(\"--contents\", dest=\"contents\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--path\",
          dest=\"path\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = write_file(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "contents", "type": "String"},
          {"name": "path", "type": "String"}], "name": "Write file"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"contents": "This is a file
          created by the pipeline into /data", "path": "/data"}'}
    volumes:
    - name: create-ridhwan-volumes
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-ridhwan-volumes-name}}'}
  - name: writing-into-pvc-test
    dag:
      tasks:
      - {name: create-ridhwan-volumes, template: create-ridhwan-volumes}
      - name: read-file
        template: read-file
        dependencies: [create-ridhwan-volumes, write-file]
        arguments:
          parameters:
          - {name: create-ridhwan-volumes-name, value: '{{tasks.create-ridhwan-volumes.outputs.parameters.create-ridhwan-volumes-name}}'}
      - name: write-file
        template: write-file
        dependencies: [create-ridhwan-volumes]
        arguments:
          parameters:
          - {name: create-ridhwan-volumes-name, value: '{{tasks.create-ridhwan-volumes.outputs.parameters.create-ridhwan-volumes-name}}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
